{"name":"Packman","body":"packman is a command line tool that can package text files together.\r\n\r\npackman was born of the need to group several JavaScript files together in one big, minified, versioned JavaScript file to improve websites' performance, therefore this is its most common use case. However, packman works with any type of text files and can package any number of files in any number of crazy ways you want.\r\n\r\nBasic usage\r\n===========\r\n\r\n\tInstall: npm install -g packman\r\n\r\n\tUsage: packman -c path/to/myconfig.json -l 4\r\n\r\n\tOptions:\r\n\t  -c, --config   Path to the config file to use                                                     [required]\r\n\t  -l, --logging  Logging level (only errors = 1, also warnings = 2, also info = 3, also debug = 4)  [default: 1]\r\n\r\nConfig files are written in yaml and look like this\r\n\r\n\tsource: my/source/dir\r\n\tdestination: my/target/dir\r\n\tvisitors:\r\n\t    - coffeescript\r\n\t    - jsmin\r\n\tpackages:\r\n\t    main.js:\r\n\t        files:\r\n\t            - CORE.js\r\n\t            - CORE/Object.js\r\n\t            - CORE/Logging.js\r\n\t    utils.js:\r\n\t        files:\r\n\t            includes:\r\n\t                - CORE/utils/**/*.js\r\n\t            excludes:\r\n\t            \t- CORE/utils/specials/*.js\r\n\t    css/styles.css:\r\n\t        visitors:\r\n\t            - less\r\n\t        files:\r\n\t            includes:\r\n\t                - **/*.less\r\n\r\nThe first level of the config contains general configuration like the source and destination folders to work on.\r\n\r\nThen, inside the `packages` node, is the list of all packages to be created.\r\n\r\nFiles to be included inside a package are given in the `files` sub-node and can be either an array of file names, or an object with either `includes` or `excludes` or both. These sub-properties are arrays of file names or ant pattern (?, *, **). If an array of files is provided, the files will be merged in this order.\r\n\r\nVisitors\r\n========\r\n\r\nYou may have noticed that the configuration accepts a visitors array. A visitor is a piece of code that transform package content, package name and file content while things are done. This is the way to get packages perfectly fit to your needs.\r\n\r\nYou can imagine using visitors for pretty much anything you want. Visitors can alter the file content but also package file names and locations or simply output other files.\r\n\r\nExamples of visitors include (but are not restricted to) including separators between the files, minifying file content, renaming package files to include a version number, processing less css or coffeescript files.\r\n\r\nA bunch of existing visitors can already be used from the visitors folder.\r\n\r\nVisitors can be specified either globally at the top level of the config file, or locally, within each package definition. Visitors are configure through an array, and are, therefore, run in a sequence, one after the other.\r\n\r\nA visitor in packman is simply a nodejs module that exports any of the following functions:\r\n\r\n\t// At the very start, even before any files have been packaged\r\n\tonStart: function(callback, config) {},\r\n\r\n\t// Before starting to package a set of files together\r\n\tonPackageStart: function(callback, config, packageFileObject) {},\r\n\r\n\t// Before a file is being inserted into a package\r\n\tonFileStart: function(callback, config, packageFileObject) {},\r\n\r\n\t// When inserting the content of a file into a package\r\n\tonFileContent: function(callback, config, fileObject) {},\r\n\r\n\t// After a file has been inserted into a package\r\n\tonFileEnd: function(callback, config, packageFileObject) {},\r\n\r\n\t// After having packaged a set of files together\r\n\tonPackageEnd: function(callback, config, packageFileObject) {},\r\n\r\n\t// At the end, when all packages are done\r\n\tonEnd: function(callback, config) {}\r\n\r\nVisitors' methods can be asynchronous if needed, this is why they accept a callback as their first parameter. Once their processing is done, they must call the callback to allow packman to continue looping on other visitors, and ultimately on other files and packages.\r\n\r\nNote that since the config is passed as argument to the above methods, you can add extra data to it to be used by visitors.\r\n\r\nMost visitors' methods accept a `packageFileObject` as argument while the `onFileContent` method accepts a `fileObject` argument, here are their interfaces:\r\n\r\n\tPackageFile = {\r\n\t    path: \"the logical path of the package file\",\r\n\t    content: \"the current content of the package file\",\r\n\t    currentFile: \"reference to the File instance that is currently being packaged if any\"\r\n\t};\r\n\r\n\tFile =  {\r\n\t    path: \"the logical path of the file\",\r\n\t    physicalPath: \"the physical path of the file\",\r\n\t    content: \"the current content of the file\",\r\n\t    packageFile: \"reference to the PackageFile including this file\"\r\n\t};\r\n\r\nMost visitors will want to modify the fileObject.content on the fly (to minify javascript for instance) or to append content to the packageFileObject.content (to insert separators for instance).","tagline":"text file packaging command line utility","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}